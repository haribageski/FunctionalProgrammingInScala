Functor

Informal Definition:
• start with F[A];

• supply a function A=>B;

• get back F[B].



Ex. Functions (it is just function composition):

• start with R => A;

• supply a function A=>B;

• get back R => B.



Formal Definition:
trait Functor[F[_]] {   //type class that abstracts over type constructor, or type constructor of one argument
  def map[A, B](fa: F[A])(f: A => B): F[B]
}

trait FunctorLaws{
  def identity[F[_], A](fa: F[A])(implicit F: Functor[F]) =
    F.map(fa)(a => a) == fa

//			              f 	       g   	         wrap
//composition: insideVal -> insideVal2 -> insideVal3 -> Container3 is equal to
//	        f   		 wrap                         g            wrap
//insideVal -> insideVal2 -> Container2 -> insideVal2 -> insideVal3 -> Container3
  def composition[F[_], A, B, C](fa: F[A], f: A => B, g: B => C)(implicit F: Functor[F]) =
    F.map(F.map(fa)(f))(g) == F.map(fa)(f andThen g)
}


Usage:
import cats.Functor._            //for defining custom Functor
import cats.std.list._          //default instances are arranged by type in the cats.std
import cats.syntax.functor._    //main method provided by the syntax for Functor is map

Hint:
If there is a Functor[A], and B extends A, the functor won't work for B.
One workaround for the problem is to define a constructor for the extended class returning the supertype, as in:
def success[A](value: A): Result[A] = Success(value)
